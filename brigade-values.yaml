# This is the main configuration file for the Brigade chart.
# To override values here, specify them in your own YAML file, and override
# during install or upgrade:
#
#    $ helm install -n brigade -f myValues.yaml brigade/brigade
#
# By default, the chart will install with RBAC. To install without
# RBAC, set `rbac.enabled` to `false`.
#
# To enable the GitHub gateway, set `brigade-github-app.enabled` to `true`.
# See brigadecore/brigade-gitub-app for steps to setup a Github App and add its configuration
# to the sub-chart section below.
#
# Advanced Configuration
#
# Developers may wish to override the location of Docker images. For each
# deployment, `registry` controls the image registry, and `name` controls
# the image name. If unspecified, the Chart.yaml's appVersion field will be
# used to pull the tag. If you override the `tag` value, that version will
# be used instead.
#
# Note that when `rbac.enabled` is turned on, as is the default, the chart will
# install a set of RBAC objects that are designed to give a moderate set of
# permissions to the Brigade core components. However, even if RBACs are not
# enabled, this chart will create service accounts for each entity that we
# install. Security experts may prefer to apply their own RBACs instead of the
# ones supplied by the chart.  Provided that the service accounts remain the
# same, this chart should provide compatibility with custom rules.

#########################
# Sub-chart configuration
#########################

# Kashti, the Brigade Dashboard, is enabled by default.
#
# These resources are included by way of a sub-chart dependency (see requirements.yaml)
#
# Further configurability of Kashti-specific values would also go here, e.g.
# kashti:
#   image:
#     repository: myrepository
#     ...
#
# For full configuration, see the kashti chart in this repository and its values.yaml.
kashti:
  enabled: true

# Brigade Github App, the GitHub Gateway for Brigade, is disabled by default.
#
# These resources are included by way of a sub-chart dependency (see requirements.yaml)
#
# Further configurability of Brigade Github App-specific values would also go here, e.g.
brigade-github-app:
  enabled: true
  registry: brigadecore
  name: brigade-github-app
  github:
    appID: 30663
    key: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpQIBAAKCAQEAp3RHNgoHLP5amyZALmyBCDDtv9mRskeusjZrIMs3suVGmb7O
      GxnCS5vedFm8/ehZPH8+44hEDg6PqhUcc8gRLOOCUpk6IQs0jWChXI4duUDEtYKd
      oloHq0kb9b9c42+6I1swfTY2YsLWKjHhhXcMDmCy5qHr49Bg2E1Cmqh5uVV6vw2y
      moHfc7IhHIlmqaHZ8OJ704ljmlxwrqnsJ8cjxQX6Bu+yGJH1XEspnOD2sfOmDBpf
      z00KwqLzYHCbk0aGiQUTQltAA+UkrLfdls7yC+e1MpHK14GQnsaGn3fSsRvcnfOL
      sDJ/N3HBhx19dO8Kh4H154KAcbe1OlEkjPXz0QIDAQABAoIBAQCfAnN8hRk7SGyR
      V0kqzC3asVuSCe+n8xmYcMRZZ5+EaOMZq23bniI52dDreytTkAbsw4fcV9EH6BvT
      ziguaZSlo4RlGstwBUvp1BBl6y2edDpWgaleOU9+/vVl7kkuTzHZ0QXCYHBUZ98m
      Qid8rQbtwDUhfDCbK4xK2VKduc2chl1WJ5I+NH/eIVNmdBXbUOB8R2kuvckS55LG
      ngh7MfUslqxzheXyZ1psSUJ2AndWcx3LItWDauVVgnIR8+FDSAhgkQWM8cni7owv
      OEwQl0o1fHfLQrbnofoOPVRiRAfHbZT4obiJfbef9ZBHUqFm3cLLgs/C7T/SHAjK
      H5/rfEThAoGBANkthCBFsuiWRxBW01z74g9zW2i/A1DCmRcJ2gBt+8LpfM1aav08
      V5tv0R+CgGP7LEPwWm6N79jQ//7TEYYv60a7owrykCiCX7kV43tIMub86CwAyXEd
      3VsB7Au459TG9akbneC8hy26fsuQMnxf3RXcfy3QCgYPSrFWcaxH8eLzAoGBAMVj
      UBPnUzN5AfKQCdbvcORmybFp3H5jEJCCv3hO9iAyd0SGIv5HfWZyd6zXc+bTbr3V
      Ulo1rfvfX3Xd8P1E6QGzR77ux6yQl32yyLARUag2fpv0KpuywoMDmSUK3AlR471W
      /6vkmqD5IHCyBvlXrn9f7A+UX30eWptpSOb2ixcrAoGBAKSoNbyiG3rsNQTWT3n4
      HvTH6U4JRGI+qAMnnPkmafLlQ5IOM3+7+FAI/ux87QrgrDb2TBn10xr3mp+BN5Ad
      VKxUJtFuBo4wCpMxXT9jBfTLWtvB3Pi+Q810L5rTnjFch3SnU5PIXFT3SJrdwOk7
      ZUvl2SbKzE672U2K1LRh96qxAoGACQ27GI6dtFiyjCurJ96nsPI+AhM2990XX2l/
      2sbUZzmpWs1EQaGJ0O8jKhxfxpCgHbjxJA4eQtVGDaP2b8d/YIKWod1V70ZajHts
      1RaWRj7po8GZSrbyUQwTNC3BVfQZnA+nfnzn0sZahJDF3R32dQUzUKufjZ+czFAR
      9fYM/y0CgYEAtdFF6qRn/+XsQRXU9FI3E8xzqw1XnP8O1Ds0ltMlS75aG4tOVlO5
      8ePiollLts8dJroB0Erq32mj0gUdtbvJCjxQnRc1Eap2BC3XsrKIIOSw733Vm892
      oAr8qvw3jNh/ezEcVmgqS+8EwYHWj6Br8dWsc4xKWd3gwDUnNq7ArZA=
      -----END RSA PRIVATE KEY-----
#
# For full configuration, see the brigade-github-app chart in this repository
#brigade-github-app:
#  enabled: true

# gw is the deprecated Oauth-based GitHub Gateway that shipped with Brigade <= v0.20
#
# Its alias has been preserved as `gw` to support legacy Brigade installations,
# although the chart name is `brigade-github-oauth`.
#
# We recommend users switch to the fully-supported Brigade GitHub App (configured above) instead.
#
# For full configuration, see the brigade-github-oauth chart in this repository
gw:
  enabled: false

#############################
# Brigade chart configuration
#############################

# IMPORTANT: The RBAC system is complex, and if you are using RBACs in your
# cluster, you may need to evaluate existing rules and accounts in addition
# to the rules created here.
rbac:
  enabled: true

# controller is the main event processor in Brigade.
controller:
  enabled: true
  registry: brigadecore
  name: brigade-controller
  # tag should only be specified if you want to override Chart.appVersion
  # The default tag is the value of .Chart.AppVersion
  #tag:
  #pullPolicy: IfNotPresent
  #workerResources:
  #  limits:
  #    cpu:
  #    memory:
  #  requests:
  #    cpu:
  #    memory:
  serviceAccount:
    create: true
    name: 

# api is the API server. It is technically not needed for the operation of the
# Brigade controller, but it is used by tools to learn about the state of the
# cluster.
#
# If you disable it, Brigade will still process events, but extra tooling (like
# brig) may not be able to learn about it.
api:
  enabled: true
  registry: brigadecore
  name: brigade-api
  # tag:
  service:
    name: brigade-api
    type: ClusterIP
    externalPort: 7745
    internalPort: 7745
  # Configure liveness probes except `httpGet`
  #livenessProbe:
  #  initialDelaySeconds: 20
  # Configure readiness probes except `httpGet`
  #readinessProbe:
  #  initialDelaySeconds: 20
  ingress:
    enabled: false
    hosts: []
    paths:
    - /
  serviceAccount:
    create: true
    name: 

# worker is the JavaScript worker. These are created on demand by the controller.
worker:
  registry: brigadecore
  name: brigade-worker
  serviceAccount: 
    create: true
    name: brigade-worker
  #tag:
  #pullPolicy: IfNotPresent


# These values are for the Container Registry (CR) gateway.
# Enabling this will start a service that handles webhooks from container
# registries like DockerHub and ACR. Note that these registries do not have
# strong auth built in, so enabling this gateway could result in repeated
# bogus requests from an unauthenticated source. This could pose a security
# risk for poorly written scripts, and could be an opening for DOS-style
# attacks on your cluster.
cr:
  enabled: false
  registry: brigadecore
  name: brigade-cr-gateway
  #tag: latest
  service:
    name: brigade-cr-service
    type: ClusterIP  # Change to LoadBalancer if you want this externally available.
    externalPort: 80
    internalPort: 8000
  # Configure liveness probes except `httpGet`
  #livenessProbe:
  #  initialDelaySeconds: 20
  # Configure readiness probes except `httpGet`
  #readinessProbe:
  #  initialDelaySeconds: 20
  serviceAccount:
    create: true
    name: 

# These values are for the Generic Gateway.
# Enabling this will start a service that handles webhooks from external clients. 
# To call this endpoint you need a special secret value that is configured once per project.
genericGateway:
  enabled: false
  registry: brigadecore
  name: brigade-generic-gateway
  #tag: latest
  service:
    name: brigade-generic-service
    type: ClusterIP  # Change to LoadBalancer if you want this externally available.
    externalPort: 8081
    internalPort: 8000
  serviceAccount:
    create: true
    name:
  ingress:
    enabled: false

    # use the correct annotation for your certificate provider
    # the following config works according to the Brigade docs
    # which show how to use Nginx Ingress Controller and cert-manager
    #
    # Note: if you delete the ingress resource and re-create it on the same subdomain, make sure
    # to delete the secret before trying again.

    # annotations:
    #   kubernetes.io/ingress.class: "nginx"    
    #   certmanager.k8s.io/cluster-issuer: "letsencrypt-prod"
    #   certmanager.k8s.io/acme-challenge-type: http01

    # hosts:
    #   - brigade-events.subdomain.domain.com
    # paths:
    # - /
    # tls:
    #   - secretName: brigade-events
    #     hosts:
    #     - brigade-events.subdomain.domain.com


# The vacuum periodically cleans up old builds.
# Brigade does not delete builds on completion. Instead, it leaves builds around
# for a period of time, providing you with an opportunity to inspect builds for
# data.
# The vacuum will sweep the system at intervals and clear out old builds.
#
# To globally turn of the vacuum, set enabled=false
vacuum:
  enabled: true
  # Set a schedule for how frequently this check is run.
  # Note that a run of the vacuum typically takes at least a minute. Finer-level
  # granularity than that may result in multiple vacuums running at once.
  # Format follows accepted Cron formats: https://en.wikipedia.org/wiki/Cron
  schedule: "@hourly"
  registry: "brigadecore"
  name: "brigade-vacuum"
  # tag: latest
  # Age tells the vacuum how old a thing may be before it is considered ready to
  # be vacuumed. The format is an integer followed by the suffix h (hours), m (minutes)
  # or s (seconds).
  # The default is 30 days (720 hours)
  age: "720h"
  # maxBuilds tells the vacuum what the absolute maximum number of builds may be stored
  # at a time. Where possible, we recommend using age rather than builds.
  # -1 means no limit is imposed.
  #
  # If both age and maxBuilds are provided, age is applied first, then maxBuilds.
  maxBuilds: -1
  serviceAccount:
    create: true
    name: 


# DEVELOPMENT ONLY: Use this for off-ACS development
# Before enabling this, log into the acr registry with Docker and then
# run `scripts/generate-acr-secret.sh`
#privateRegistry: brigade-registry

